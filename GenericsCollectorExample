import java.util.*;
import java.util.function.BiConsumer;
import java.util.function.BinaryOperator;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class CustomCollectorExample {

    public static void main(String args[]) {
        //  List<String> stringList = Arrays.asList("apple", "banana", "cherry", "date");
        //List<Integer> intList = Arrays.asList(1,2,3,4,5);
        List<Asset> assetsList = List.of(new Asset("A",1),new Asset("B",2),
                new Asset("C",3),new Asset("D",4));

        GenericJoinerCollector<Asset> collector = new GenericJoinerCollector<>(" | ");

        //String result = Stream.of(1, 2, 3, 4, 5)
        //      .collect(collector);

        String result = assetsList.stream().collect(collector);


        System.out.println("Concatenated list: "+ result);



    }
}


class Asset{

    private  String name;

    private int score;

    public String getName() {
        return name;
    }

    public int getScore() {
        return score;
    }

    public Asset(String name, int score) {
        this.name = name;
        this.score = score;
    }
}


public class GenericJoinerCollector<T> implements Collector<T, StringJoiner, String> {

    private final String delimiter;

    public GenericJoinerCollector(String delimiter) {
        this.delimiter = delimiter;
    }

    @Override
    public Supplier<StringJoiner> supplier() {
        return () -> new StringJoiner(delimiter);
    }

    @Override
    public BiConsumer<StringJoiner, T> accumulator() {
        return (joiner, element) -> joiner.add(String.valueOf(element));
    }

    @Override
    public BinaryOperator<StringJoiner> combiner() {
        return StringJoiner::merge;
    }

    @Override
    public Function<StringJoiner, String> finisher() {
        return StringJoiner::toString;
    }

    @Override
    public Set<Characteristics> characteristics() {
        return EnumSet.of(Characteristics.UNORDERED);
    }
}




